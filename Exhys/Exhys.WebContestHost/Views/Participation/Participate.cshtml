@model ParticipationViewModel
@section scripts{
	<script type="text/javascript">

		function refreshSubmissions() {
			$.ajaxSetup({
				cache: false
			});
			var currentHeight = $("#submissions-list").height();
			$('#submissions-list').css("height", currentHeight);
			$.ajax(
				{
					url: '@Url.Action("ListSubmissions", "Participation")?participationId=@Model.Id',
					success: function (result) {
						$("#submissions-list").html(result)
							.promise()
							.done(function () {
								$("#submissions-list").css("height", "");
								currentHeight = $("#submissions-list").height();
								$('#submissions-list').css("height", currentHeight);
							});
					}
				});
		}
	    $(document).ready(function () {
		    setInterval(refreshSubmissions, 5000);
	    });
		$(document).ready(function () {
			setInterval(refreshSubmissions, 5000);
		});
		function resizeTextarea(id) {
			var a = document.getElementById(id);
			a.style.height = 'auto';
			a.style.height = a.scrollHeight+25 + 'px';
		}

		function init() {
			var a = document.getElementsByTagName('inputLarge');
			for (var i = 0, inb = a.length; i < inb; i++) {
				if (a[i].getAttribute('data-resizable') == 'true')
					resizeTextarea(a[i].id);
			}
		}

		addEventListener('DOMContentLoaded', init);
	</script>
}
@if(Model != null && Model.Competition != null)
{
	<h2 class="text-center">@Model.Competition.Name</h2>
}


@*Problem List*@
<div class="form-group">
	<section style="float:left" class="col-lg-4">
		<fieldset>
			<legend>Problems</legend>
			<table class="table-bordered table">

				<tbody>
					@for(int i = 0; i < Model.Competition.Problems.Count; i++)
					{
						<tr>
							<th width="50%">@Model.Competition.Problems[i].Name</th>
							<td width="50%">
								@for(int j = 0; j < Model.Competition.Problems[i].ProblemStatements.Count; j++)
								{
									<div class="padding-0 center">
										@using(Html.BeginForm(method: FormMethod.Get, actionName: "DownloadStatement", controllerName: "Participation"))
										{
											<input type="hidden" name="id" value="@Model.Competition.Problems[i].ProblemStatements[j].Id" />
											<button type="submit" class="btn btn-link height-25px padding-0">@Model.Competition.Problems[i].ProblemStatements[j].Filename.Split('\\').Last()</button>
										}
									</div>
								}
							</td>
						</tr>
					}
				</tbody>
			</table>
		</fieldset>
		<br/><br />
		<div id="submissions-list" style="display: inline-block">
			@{Html.RenderAction(actionName: "ListSubmissions", controllerName: "Participation", routeValues: new { participationId = Model.Id });}
		</div>
		<br /><br /><br /><br />
	</section>


	@*Submission*@
	<section style="padding-left:1cm;">
		@using(Html.BeginForm(actionName: "SubmitSolution", controllerName: "Participation", method: FormMethod.Post, htmlAttributes: new { }))
		{
			var vm = new ProblemSolutionViewModel();

			<fieldset>
				<legend>Submit a Solution</legend>
				<div class="form-group">
					@Html.LabelFor(m => vm.ProblemId, "Problem")
					@Html.FixedDropDownListFor(m => vm.ProblemId, ViewData.GetProblemOptions(), new { @class = "form-control" })
				</div>

				<div class="form-group">
					@Html.LabelFor(m => vm.SourceCode, "Source Code")
					@Html.TextAreaFor(m => vm.SourceCode, new { placeholder = "//Hello, World!", @class = "form-control input-lg font-size-14", id = "inputLarge" ,onkeyup = "resizeTextarea('inputLarge')", wrap = "off" })
				</div>

				<div class="form-group">
					@Html.LabelFor(m => vm.LanguageAlias, "Language")
					@Html.FixedDropDownListFor(m => vm.LanguageAlias, ViewData.GetProgrammingLanguageOptions(), new { @class = "form-control" })
				</div>

				<div class="form-group">
					<button class="btn btn-primary" type="submit">Submit Solution</button>
					<button class="btn btn-default" type="reset">Reset</button>
				</div>
			</fieldset>
		}

	</section>
</div>

<br /><br /><br />
<!--div id="submissions-list" style="display: inline-block">
	@{Html.RenderAction(actionName: "ListSubmissions", controllerName: "Participation", routeValues: new { participationId = Model.Id });}
</!--div-->


<script>
	$(document).ready(function () {
		setInterval(refreshSubmissions, 5000);
	});
</script>
